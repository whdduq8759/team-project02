공통 설명
(점버튼, 연산버튼 +/-버튼)
if ($show.hasAttribute('value')) {}을 이용하여 처음에 버튼을 눌렀을 때 버튼의 값이 연속적으로 나오지 않게 함.
(숫자버튼, 점버튼, 연산버튼)
계산기의 버튼을 눌렀을 떄 if (e.target.matches()) {}을 사용하여 해당 버튼을 눌렀을 때 이벤트가 터지게 했고, 버튼을 눌렀을 때 textContent을 함수에 담고, 



1. 숫자 버튼 클릭  
그 함수는 textContent를 input에 value값으로 저장하여 화면에 나오게 하고, div에 textContent로 저장하여 화면에 나오게 했음
버튼을 계속 눌렀을 때 연속으로 나오게 하기 위해  $show.value += num;, $resultDiv.textContent += num; 을 사용함

2. 연산(+-*/=) 버튼 클릭


4. +/- 버튼 클릭
+/- 버튼을 클릭 했을 때 input에 들어 있는 value값앞에 +을 붙여 number형태로 바꿔주고 * -1을 하여 양수면 음수로 음수면 양수로 바꿔주는 함수를 호출하여 값의 상태를 바꿔줌.


5. 점 버튼 클릭
그 함수는 textContent를 input에 나오게 value값으로 저장하여 화면에 나오게 하고, 점을 포함한 값을 배열에 저장함.

6. AC 버튼 클릭
클릭한 값들을 담은 배열을 0번 인덱스 부터 배열의 길이까지의 값을 삭제 하고, input의 value값과 div의 textContent를 공백으로 처리하여 초기회 작업을 함.

7. C 버튼 클릭
연산 클릭할 때마다 값을 push로 배열에 삽입하고 input의 value에 배열의 마지막 이전 값을 넣어 iput에 직전값이 나오게 함. 
count에 배열의 길이에 1을 더한 값을 넣고, C버튼을 클릭할 때마다 count와 배열을 하나씩 줄이다가 count가 0이면 input의 value를 공백으로 처리함.

8. input과 div 출력 값
div는 버튼을 눌렀을 때 버튼의 값이 textContent로 바뀌면서 화면에 출력하게 만들었으며, 숫자 버튼을 눌렀을 때 하나의 형태로 나오게 함, 단 연산버튼을 눌렀을 때 연산기호가 화면에 출력되지 않고, input에 출력하게 만듬. 
input은 버튼을 눌렀을 떄  버튼의 값이 value값으로 바뀌면서 화면에 출력하고, 숫자 버튼과 연산 버튼을 눌렀을 때 동시에 한꺼번에 나오게 설정함.


9. 19자리 수 제한
숫자를 입력할때 over함수에 target을 매개변수로 넣어 input에 입력된 문자열 길이가 19글자를 넘으면  preventDefault함수로 더이상의 숫자 입력이 불가능하게 만듬.


